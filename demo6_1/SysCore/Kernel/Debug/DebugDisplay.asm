; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	M:\github\demo6_1\SysCore\Kernel\DebugDisplay.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?tbuf@@3PADA					; tbuf
PUBLIC	?bchars@@3PADA					; bchars
_BSS	SEGMENT
__xPos	DD	01H DUP (?)
__yPos	DD	01H DUP (?)
__startX DD	01H DUP (?)
__startY DD	01H DUP (?)
__color	DD	01H DUP (?)
?tbuf@@3PADA DB	020H DUP (?)				; tbuf
_BSS	ENDS
_DATA	SEGMENT
?bchars@@3PADA DB 030H					; bchars
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
_DATA	ENDS
PUBLIC	?DebugClrScr@@YAXG@Z				; DebugClrScr
PUBLIC	?DebugPuts@@YAXPAD@Z				; DebugPuts
PUBLIC	?DebugPrintf@@YAHPBDZZ				; DebugPrintf
PUBLIC	?DebugSetColor@@YAII@Z				; DebugSetColor
PUBLIC	?DebugGotoXY@@YAXII@Z				; DebugGotoXY
PUBLIC	?DebugPutc@@YAXE@Z				; DebugPutc
PUBLIC	?itoa@@YAXIIPAD@Z				; itoa
PUBLIC	?itoa_s@@YAXHIPAD@Z				; itoa_s
EXTRN	?strlen@@YAIPBD@Z:PROC				; strlen
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?itoa_s@@YAXHIPAD@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_base$ = 12						; size = 4
_buf$ = 16						; size = 4
?itoa_s@@YAXHIPAD@Z PROC				; itoa_s, COMDAT

; 107  :    if (base > 16) return;

	mov	edx, DWORD PTR _base$[esp-4]
	cmp	edx, 16					; 00000010H
	ja	SHORT $LN3@itoa_s

; 108  :    if (i < 0) {

	mov	eax, DWORD PTR _i$[esp-4]

; 109  :       *buf++ = '-';

	mov	ecx, DWORD PTR _buf$[esp-4]
	test	eax, eax
	jns	SHORT $LN1@itoa_s
	mov	BYTE PTR [ecx], 45			; 0000002dH
	inc	ecx

; 110  :       i *= -1;

	neg	eax
$LN1@itoa_s:

; 111  :    }
; 112  :    itoa(i,base,buf);

	mov	DWORD PTR _buf$[esp-4], ecx
	mov	DWORD PTR _base$[esp-4], edx
	mov	DWORD PTR _i$[esp-4], eax
	jmp	?itoa@@YAXIIPAD@Z			; itoa
$LN3@itoa_s:

; 113  : }

	ret	0
?itoa_s@@YAXHIPAD@Z ENDP				; itoa_s
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?itoa@@YAXIIPAD@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_base$ = 12						; size = 4
_buf$ = 16						; size = 4
?itoa@@YAXIIPAD@Z PROC					; itoa, COMDAT

; 83   : void itoa(unsigned i,unsigned base,char* buf) {

	push	esi

; 84   :    int pos = 0;
; 85   :    int opos = 0;
; 86   :    int top = 0;
; 87   : 
; 88   :    if (i == 0 || base > 16) {

	mov	esi, DWORD PTR _i$[esp]
	xor	ecx, ecx
	push	edi
	test	esi, esi
	je	SHORT $LN6@itoa
	mov	edi, DWORD PTR _base$[esp+4]
	cmp	edi, 16					; 00000010H
	ja	SHORT $LN6@itoa
$LL5@itoa:

; 90   :       buf[1] = '\0';
; 91   :       return;
; 92   :    }
; 93   : 
; 94   :    while (i != 0) {
; 95   :       tbuf[pos] = bchars[i % base];

	mov	eax, esi
	xor	edx, edx
	div	edi

; 96   :       pos++;

	inc	ecx
	mov	esi, eax
	mov	al, BYTE PTR ?bchars@@3PADA[edx]
	mov	BYTE PTR ?tbuf@@3PADA[ecx-1], al
	test	esi, esi
	jne	SHORT $LL5@itoa

; 100  :    for (opos=0; opos<top; pos--,opos++) {

	mov	esi, DWORD PTR _buf$[esp+4]
	mov	edi, ecx
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN1@itoa

; 97   :       i /= base;
; 98   :    }
; 99   :    top=pos--;

	lea	edx, DWORD PTR ?tbuf@@3PADA[ecx-1]
$LL3@itoa:

; 101  :       buf[opos] = tbuf[pos];

	mov	cl, BYTE PTR [edx]
	mov	BYTE PTR [eax+esi], cl
	inc	eax
	lea	edx, DWORD PTR [edx-1]
	cmp	eax, edi
	jl	SHORT $LL3@itoa
$LN1@itoa:
	pop	edi

; 102  :    }
; 103  :    buf[opos] = 0;

	mov	BYTE PTR [eax+esi], 0
	pop	esi

; 104  : }

	ret	0
$LN6@itoa:

; 89   :       buf[0] = '0';

	mov	eax, DWORD PTR _buf$[esp+4]
	pop	edi
	mov	WORD PTR [eax], 48			; 00000030H
	pop	esi

; 104  : }

	ret	0
?itoa@@YAXIIPAD@Z ENDP					; itoa
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?DebugPutc@@YAXE@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?DebugPutc@@YAXE@Z PROC					; DebugPutc, COMDAT

; 58   : 
; 59   : 	if (c==0)

	mov	dl, BYTE PTR _c$[esp-4]
	test	dl, dl
	je	SHORT $LN5@DebugPutc

; 60   : 		return;
; 61   : 
; 62   : 	if (c == '\n'||c=='\r') {	/* start new line */

	cmp	dl, 10					; 0000000aH
	je	SHORT $LN2@DebugPutc
	cmp	dl, 13					; 0000000dH
	je	SHORT $LN2@DebugPutc

; 65   : 		return;
; 66   : 	}
; 67   : 
; 68   : 	if (_xPos > 79) {			/* start new line */

	push	esi
	mov	esi, DWORD PTR __xPos
	cmp	esi, 79					; 0000004fH
	jbe	SHORT $LN1@DebugPutc

; 69   : 		_yPos+=2;
; 70   : 		_xPos=_startX;

	mov	eax, DWORD PTR __startX
	add	DWORD PTR __yPos, 2
	mov	DWORD PTR __xPos, eax
	pop	esi
$LN5@DebugPutc:

; 78   : }

	ret	0
$LN1@DebugPutc:

; 71   : 		return;
; 72   : 	}
; 73   : 
; 74   : 	/* draw the character */
; 75   : 	unsigned char* p = (unsigned char*)VID_MEMORY + (_xPos++)*2 + _yPos * 80;

	mov	eax, DWORD PTR __yPos
	lea	eax, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [esi+eax*8]

; 76   : 	*p++ = c;
; 77   : 	*p =_color;

	mov	al, BYTE PTR __color
	inc	esi
	mov	DWORD PTR __xPos, esi
	mov	BYTE PTR [ecx*2+753664], dl
	mov	BYTE PTR [ecx*2+753665], al
	pop	esi

; 78   : }

	ret	0
$LN2@DebugPutc:

; 63   : 		_yPos+=2;
; 64   : 		_xPos=_startX;

	mov	eax, DWORD PTR __startX
	add	DWORD PTR __yPos, 2
	mov	DWORD PTR __xPos, eax

; 78   : }

	ret	0
?DebugPutc@@YAXE@Z ENDP					; DebugPutc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?DebugGotoXY@@YAXII@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?DebugGotoXY@@YAXII@Z PROC				; DebugGotoXY, COMDAT

; 127  : 
; 128  : 	// reposition starting vectors for next text to follow
; 129  : 	// multiply by 2 do to the video modes 2byte per character layout
; 130  : 	_xPos = x*2;

	mov	eax, DWORD PTR _x$[esp-4]
	lea	ecx, DWORD PTR [eax+eax]

; 131  : 	_yPos = y*2;

	mov	eax, DWORD PTR _y$[esp-4]
	add	eax, eax
	mov	DWORD PTR __xPos, ecx
	mov	DWORD PTR __yPos, eax

; 132  : 	_startX=_xPos;

	mov	DWORD PTR __startX, ecx

; 133  : 	_startY=_yPos;

	mov	DWORD PTR __startY, eax

; 134  : }

	ret	0
?DebugGotoXY@@YAXII@Z ENDP				; DebugGotoXY
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?DebugSetColor@@YAII@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
?DebugSetColor@@YAII@Z PROC				; DebugSetColor, COMDAT

; 120  : 
; 121  : 	unsigned t=_color;
; 122  : 	_color=c;

	mov	ecx, DWORD PTR _c$[esp-4]
	mov	eax, DWORD PTR __color
	mov	DWORD PTR __color, ecx

; 123  : 	return t;
; 124  : }

	ret	0
?DebugSetColor@@YAII@Z ENDP				; DebugSetColor
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?DebugPrintf@@YAHPBDZZ
_TEXT	SEGMENT
tv589 = -36						; size = 4
_str$1 = -32						; size = 32
_str$2 = -32						; size = 32
_str$3 = -32						; size = 32
_str$ = 8						; size = 4
?DebugPrintf@@YAHPBDZZ PROC				; DebugPrintf, COMDAT

; 159  : int DebugPrintf (const char* str, ...) {

	sub	esp, 36					; 00000024H
	push	ebp

; 160  : 
; 161  : 	if(!str)

	mov	ebp, DWORD PTR _str$[esp+36]
	test	ebp, ebp
	jne	SHORT $LN15@DebugPrint

; 162  : 		return 0;

	xor	eax, eax
	pop	ebp

; 225  : 		}
; 226  : 
; 227  : 	}
; 228  : 
; 229  : 	va_end (args);
; 230  : }

	add	esp, 36					; 00000024H
	ret	0
$LN15@DebugPrint:
	push	esi

; 166  : 
; 167  : 	for (size_t i=0; i<strlen(str);i++) {

	push	ebp
	xor	esi, esi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	test	eax, eax
	je	$LN88@DebugPrint

; 163  : 
; 164  : 	va_list		args;
; 165  : 	va_start (args, str);

	lea	ecx, DWORD PTR _str$[esp+40]
	push	ebx
	mov	DWORD PTR tv589[esp+48], ecx
	push	edi
$LL14@DebugPrint:

; 168  : 
; 169  : 		switch (str[i]) {

	mov	al, BYTE PTR [esi+ebp]
	cmp	al, 37					; 00000025H
	je	SHORT $LN9@DebugPrint

; 218  : 				}
; 219  : 
; 220  : 				break;
; 221  : 
; 222  : 			default:
; 223  : 				DebugPutc (str[i]);

	push	eax
	call	?DebugPutc@@YAXE@Z			; DebugPutc
	add	esp, 4

; 224  : 				break;

	jmp	$LN13@DebugPrint
$LN9@DebugPrint:

; 170  : 
; 171  : 			case '%':
; 172  : 
; 173  : 				switch (str[i+1]) {

	movsx	eax, BYTE PTR [esi+ebp+1]
	add	eax, -88				; ffffffa8H
	cmp	eax, 32					; 00000020H
	ja	$LN2@DebugPrint
	movzx	eax, BYTE PTR $LN87@DebugPrint[eax]
	jmp	DWORD PTR $LN93@DebugPrint[eax*4]
$LN6@DebugPrint:

; 174  : 
; 175  : 					/*** characters ***/
; 176  : 					case 'c': {
; 177  : 						char c = va_arg (args, char);
; 178  : 						DebugPutc (c);

	movzx	eax, BYTE PTR [ecx+4]
	add	ecx, 4
	push	eax
	mov	DWORD PTR tv589[esp+56], ecx
	call	?DebugPutc@@YAXE@Z			; DebugPutc

; 179  : 						i++;		// go to next character
; 180  : 						break;

	jmp	$LN91@DebugPrint
$LN5@DebugPrint:

; 181  : 					}
; 182  : 
; 183  : 					/*** address of ***/
; 184  : 					case 's': {
; 185  : 						int c = (int&) va_arg (args, char);

	add	ecx, 4
	mov	DWORD PTR tv589[esp+52], ecx

; 186  : 						char str[32]={0};
; 187  : 						itoa_s (c, 16, str);

	mov	ecx, DWORD PTR [ecx]
	xorps	xmm0, xmm0
	mov	BYTE PTR _str$3[esp+52], 0
	movq	QWORD PTR _str$3[esp+53], xmm0
	movq	QWORD PTR _str$3[esp+61], xmm0
	movq	QWORD PTR _str$3[esp+69], xmm0
	mov	DWORD PTR _str$3[esp+77], 0
	mov	WORD PTR _str$3[esp+81], 0
	mov	BYTE PTR _str$3[esp+83], 0
	lea	edi, DWORD PTR _str$3[esp+52]

; 104  : }
; 105  : 
; 106  : void itoa_s(int i,unsigned base,char* buf) {
; 107  :    if (base > 16) return;
; 108  :    if (i < 0) {

	test	ecx, ecx
	jns	SHORT $LN18@DebugPrint

; 109  :       *buf++ = '-';

	mov	BYTE PTR _str$3[esp+52], 45		; 0000002dH
	lea	edi, DWORD PTR _str$3[esp+53]

; 110  :       i *= -1;

	neg	ecx
$LN18@DebugPrint:

; 84   :    int pos = 0;

	xor	edx, edx

; 85   :    int opos = 0;
; 86   :    int top = 0;
; 87   : 
; 88   :    if (i == 0 || base > 16) {

	test	ecx, ecx
	je	$LN53@DebugPrint
	npad	1
$LL26@DebugPrint:

; 90   :       buf[1] = '\0';
; 91   :       return;
; 92   :    }
; 93   : 
; 94   :    while (i != 0) {
; 95   :       tbuf[pos] = bchars[i % base];

	mov	eax, ecx
	and	eax, 15					; 0000000fH

; 97   :       i /= base;

	shr	ecx, 4
	mov	al, BYTE PTR ?bchars@@3PADA[eax]
	mov	BYTE PTR ?tbuf@@3PADA[edx], al
	inc	edx
	test	ecx, ecx
	jne	SHORT $LL26@DebugPrint

; 98   :    }
; 99   :    top=pos--;

	mov	ebx, edx

; 100  :    for (opos=0; opos<top; pos--,opos++) {

	test	ebx, ebx
	jle	$LN48@DebugPrint

; 98   :    }
; 99   :    top=pos--;

	lea	edx, DWORD PTR ?tbuf@@3PADA[edx-1]
	npad	7
$LL24@DebugPrint:

; 101  :       buf[opos] = tbuf[pos];

	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+edi], al
	inc	ecx
	lea	edx, DWORD PTR [edx-1]
	cmp	ecx, ebx
	jl	SHORT $LL24@DebugPrint

; 102  :    }
; 103  :    buf[opos] = 0;

	mov	BYTE PTR [ecx+edi], 0
	jmp	$LN55@DebugPrint
$LN4@DebugPrint:

; 188  : 						DebugPuts (str);
; 189  : 						i++;		// go to next character
; 190  : 						break;
; 191  : 					}
; 192  : 
; 193  : 					/*** integers ***/
; 194  : 					case 'd':
; 195  : 					case 'i': {
; 196  : 						int c = va_arg (args, int);

	add	ecx, 4
	mov	DWORD PTR tv589[esp+52], ecx

; 197  : 						char str[32]={0};
; 198  : 						itoa_s (c, 10, str);

	mov	ecx, DWORD PTR [ecx]
	xorps	xmm0, xmm0
	mov	BYTE PTR _str$2[esp+52], 0
	movq	QWORD PTR _str$2[esp+53], xmm0
	movq	QWORD PTR _str$2[esp+61], xmm0
	movq	QWORD PTR _str$2[esp+69], xmm0
	mov	DWORD PTR _str$2[esp+77], 0
	mov	WORD PTR _str$2[esp+81], 0
	mov	BYTE PTR _str$2[esp+83], 0
	lea	ebx, DWORD PTR _str$2[esp+52]

; 104  : }
; 105  : 
; 106  : void itoa_s(int i,unsigned base,char* buf) {
; 107  :    if (base > 16) return;
; 108  :    if (i < 0) {

	test	ecx, ecx
	jns	SHORT $LN31@DebugPrint

; 109  :       *buf++ = '-';

	mov	BYTE PTR _str$2[esp+52], 45		; 0000002dH
	lea	ebx, DWORD PTR _str$2[esp+53]

; 110  :       i *= -1;

	neg	ecx
$LN31@DebugPrint:

; 84   :    int pos = 0;

	xor	edi, edi

; 85   :    int opos = 0;
; 86   :    int top = 0;
; 87   : 
; 88   :    if (i == 0 || base > 16) {

	test	ecx, ecx
	je	SHORT $LN40@DebugPrint
$LL39@DebugPrint:

; 90   :       buf[1] = '\0';
; 91   :       return;
; 92   :    }
; 93   : 
; 94   :    while (i != 0) {
; 95   :       tbuf[pos] = bchars[i % base];

	mov	eax, -858993459				; cccccccdH
	mul	ecx
	shr	edx, 3

; 96   :       pos++;

	inc	edi
	lea	eax, DWORD PTR [edx+edx*4]
	add	eax, eax
	sub	ecx, eax
	mov	al, BYTE PTR ?bchars@@3PADA[ecx]
	mov	BYTE PTR ?tbuf@@3PADA[edi-1], al

; 97   :       i /= base;

	mov	ecx, edx
	test	ecx, ecx
	jne	SHORT $LL39@DebugPrint

; 98   :    }
; 99   :    top=pos--;

	mov	ebp, edi

; 100  :    for (opos=0; opos<top; pos--,opos++) {

	test	ebp, ebp
	jle	SHORT $LN35@DebugPrint

; 98   :    }
; 99   :    top=pos--;

	lea	edx, DWORD PTR ?tbuf@@3PADA[edi-1]
$LL37@DebugPrint:

; 101  :       buf[opos] = tbuf[pos];

	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+ebx], al
	inc	ecx
	lea	edx, DWORD PTR [edx-1]
	cmp	ecx, ebp
	jl	SHORT $LL37@DebugPrint
$LN35@DebugPrint:

; 102  :    }
; 103  :    buf[opos] = 0;

	mov	ebp, DWORD PTR _str$[esp+48]
	mov	BYTE PTR [ecx+ebx], 0
	jmp	$LN55@DebugPrint
$LN40@DebugPrint:

; 89   :       buf[0] = '0';

	mov	WORD PTR [ebx], 48			; 00000030H

; 199  : 						DebugPuts (str);
; 200  : 						i++;		// go to next character
; 201  : 						break;

	jmp	$LN55@DebugPrint
$LN3@DebugPrint:

; 202  : 					}
; 203  : 
; 204  : 					/*** display in hex ***/
; 205  : 					case 'X':
; 206  : 					case 'x': {
; 207  : 						int c = va_arg (args, int);
; 208  : 						char str[32]={0};
; 209  : 						itoa_s (c,16,str);

	mov	eax, DWORD PTR [ecx+4]
	add	ecx, 4
	xorps	xmm0, xmm0
	mov	DWORD PTR tv589[esp+52], ecx
	mov	BYTE PTR _str$1[esp+52], 0
	movq	QWORD PTR _str$1[esp+53], xmm0
	movq	QWORD PTR _str$1[esp+61], xmm0
	movq	QWORD PTR _str$1[esp+69], xmm0
	mov	DWORD PTR _str$1[esp+77], 0
	mov	WORD PTR _str$1[esp+81], 0
	mov	BYTE PTR _str$1[esp+83], 0
	lea	edi, DWORD PTR _str$1[esp+52]

; 104  : }
; 105  : 
; 106  : void itoa_s(int i,unsigned base,char* buf) {
; 107  :    if (base > 16) return;
; 108  :    if (i < 0) {

	test	eax, eax
	jns	SHORT $LN44@DebugPrint

; 109  :       *buf++ = '-';

	mov	BYTE PTR _str$1[esp+52], 45		; 0000002dH
	lea	edi, DWORD PTR _str$1[esp+53]

; 110  :       i *= -1;

	neg	eax
$LN44@DebugPrint:

; 84   :    int pos = 0;

	xor	edx, edx

; 85   :    int opos = 0;
; 86   :    int top = 0;
; 87   : 
; 88   :    if (i == 0 || base > 16) {

	test	eax, eax
	je	SHORT $LN53@DebugPrint
	npad	5
$LL52@DebugPrint:

; 90   :       buf[1] = '\0';
; 91   :       return;
; 92   :    }
; 93   : 
; 94   :    while (i != 0) {
; 95   :       tbuf[pos] = bchars[i % base];

	mov	ecx, eax
	and	ecx, 15					; 0000000fH

; 97   :       i /= base;

	shr	eax, 4
	mov	cl, BYTE PTR ?bchars@@3PADA[ecx]
	mov	BYTE PTR ?tbuf@@3PADA[edx], cl
	inc	edx
	test	eax, eax
	jne	SHORT $LL52@DebugPrint

; 98   :    }
; 99   :    top=pos--;

	mov	ebx, edx

; 100  :    for (opos=0; opos<top; pos--,opos++) {

	xor	ecx, ecx
	test	ebx, ebx
	jle	SHORT $LN48@DebugPrint

; 98   :    }
; 99   :    top=pos--;

	lea	edx, DWORD PTR ?tbuf@@3PADA[edx-1]
$LL50@DebugPrint:

; 101  :       buf[opos] = tbuf[pos];

	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+edi], al
	inc	ecx
	lea	edx, DWORD PTR [edx-1]
	cmp	ecx, ebx
	jl	SHORT $LL50@DebugPrint
$LN48@DebugPrint:

; 102  :    }
; 103  :    buf[opos] = 0;

	mov	BYTE PTR [ecx+edi], 0
	jmp	SHORT $LN55@DebugPrint
$LN53@DebugPrint:

; 89   :       buf[0] = '0';

	mov	WORD PTR [edi], 48			; 00000030H
$LN55@DebugPrint:

; 210  : 						DebugPuts (str);

	lea	eax, DWORD PTR _str$1[esp+52]
	push	eax
	call	?DebugPuts@@YAXPAD@Z			; DebugPuts
$LN91@DebugPrint:
	add	esp, 4

; 211  : 						i++;		// go to next character

	inc	esi
$LN13@DebugPrint:

; 166  : 
; 167  : 	for (size_t i=0; i<strlen(str);i++) {

	push	ebp
	inc	esi
	call	?strlen@@YAIPBD@Z			; strlen
	mov	ecx, DWORD PTR tv589[esp+56]
	add	esp, 4
	cmp	esi, eax
	jb	$LL14@DebugPrint
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp

; 225  : 		}
; 226  : 
; 227  : 	}
; 228  : 
; 229  : 	va_end (args);
; 230  : }

	add	esp, 36					; 00000024H
	ret	0
$LN2@DebugPrint:
	pop	edi

; 212  : 						break;
; 213  : 					}
; 214  : 
; 215  : 					default:
; 216  : 						va_end (args);
; 217  : 						return 1;

	mov	eax, 1
	pop	ebx
$LN88@DebugPrint:
	pop	esi
	pop	ebp

; 225  : 		}
; 226  : 
; 227  : 	}
; 228  : 
; 229  : 	va_end (args);
; 230  : }

	add	esp, 36					; 00000024H
	ret	0
$LN93@DebugPrint:
	DD	$LN3@DebugPrint
	DD	$LN6@DebugPrint
	DD	$LN4@DebugPrint
	DD	$LN5@DebugPrint
	DD	$LN2@DebugPrint
$LN87@DebugPrint:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
?DebugPrintf@@YAHPBDZZ ENDP				; DebugPrintf
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?DebugPuts@@YAXPAD@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?DebugPuts@@YAXPAD@Z PROC				; DebugPuts, COMDAT

; 150  : void DebugPuts (char* str) {

	push	edi

; 151  : 
; 152  : 	if (!str)

	mov	edi, DWORD PTR _str$[esp]
	test	edi, edi
	je	SHORT $LN1@DebugPuts

; 153  : 		return;
; 154  : 
; 155  : 	for (size_t i=0; i<strlen (str); i++)

	push	esi
	push	edi
	xor	esi, esi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	test	eax, eax
	je	SHORT $LN16@DebugPuts
	npad	7
$LL3@DebugPuts:

; 156  : 		DebugPutc (str[i]);

	mov	al, BYTE PTR [esi+edi]

; 59   : 	if (c==0)

	test	al, al
	je	SHORT $LN2@DebugPuts

; 60   : 		return;
; 61   : 
; 62   : 	if (c == '\n'||c=='\r') {	/* start new line */

	cmp	al, 10					; 0000000aH
	je	SHORT $LN8@DebugPuts
	cmp	al, 13					; 0000000dH
	je	SHORT $LN8@DebugPuts

; 65   : 		return;
; 66   : 	}
; 67   : 
; 68   : 	if (_xPos > 79) {			/* start new line */

	mov	edx, DWORD PTR __xPos
	cmp	edx, 79					; 0000004fH
	ja	SHORT $LN8@DebugPuts

; 69   : 		_yPos+=2;
; 70   : 		_xPos=_startX;
; 71   : 		return;
; 72   : 	}
; 73   : 
; 74   : 	/* draw the character */
; 75   : 	unsigned char* p = (unsigned char*)VID_MEMORY + (_xPos++)*2 + _yPos * 80;

	mov	ecx, DWORD PTR __yPos
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
	inc	edx

; 76   : 	*p++ = c;

	mov	BYTE PTR [ecx*2+753664], al

; 77   : 	*p =_color;

	mov	al, BYTE PTR __color
	mov	DWORD PTR __xPos, edx
	mov	BYTE PTR [ecx*2+753665], al
	jmp	SHORT $LN2@DebugPuts
$LN8@DebugPuts:

; 63   : 		_yPos+=2;
; 64   : 		_xPos=_startX;

	mov	eax, DWORD PTR __startX
	add	DWORD PTR __yPos, 2
	mov	DWORD PTR __xPos, eax
$LN2@DebugPuts:

; 153  : 		return;
; 154  : 
; 155  : 	for (size_t i=0; i<strlen (str); i++)

	push	edi
	inc	esi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	cmp	esi, eax
	jb	SHORT $LL3@DebugPuts
$LN16@DebugPuts:
	pop	esi
$LN1@DebugPuts:
	pop	edi

; 157  : }

	ret	0
?DebugPuts@@YAXPAD@Z ENDP				; DebugPuts
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File m:\github\demo6_1\syscore\kernel\debugdisplay.cpp
;	COMDAT ?DebugClrScr@@YAXG@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?DebugClrScr@@YAXG@Z PROC				; DebugClrScr, COMDAT

; 137  : 
; 138  : 	unsigned char* p = (unsigned char*)VID_MEMORY;
; 139  : 
; 140  : 	for (int i=0; i<160*30; i+=2) {

	mov	dx, WORD PTR _c$[esp-4]
	mov	eax, 753665				; 000b8001H
	mov	ecx, 2400				; 00000960H
	npad	1
$LL3@DebugClrSc:

; 141  : 
; 142  : 		p[i] = ' ';  /* Need to watch out for MSVC++ optomization memset() call */

	mov	BYTE PTR [eax-1], 32			; 00000020H

; 143  : 		p[i+1] = c;

	mov	BYTE PTR [eax], dl
	lea	eax, DWORD PTR [eax+2]
	dec	ecx
	jne	SHORT $LL3@DebugClrSc

; 144  : 	}
; 145  : 
; 146  : 	// go to start of previous set vector
; 147  : 	_xPos=_startX;_yPos=_startY;

	mov	eax, DWORD PTR __startX
	mov	DWORD PTR __xPos, eax
	mov	eax, DWORD PTR __startY
	mov	DWORD PTR __yPos, eax

; 148  : }

	ret	0
?DebugClrScr@@YAXG@Z ENDP				; DebugClrScr
_TEXT	ENDS
END
